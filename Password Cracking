/**
To compile
mpicc -o PsswdMPI_Bikesh1 PsswdMPI_Bikesh1.c -lcrypt
To run
mpirun -n 3 ./PsswdMPI_Bikesh1

**/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <crypt.h>
#include <stdio.h>
#include <mpi.h>
#include <unistd.h>
#include <math.h>
#include <time.h>
int n_passwords = 4;
//encrypted password using crypt funcion
char *encrypted_passwords[] = {
 "$6$KB$0G24VuNaA9ApVG4z8LkI/OOr9a54nBfzgQjbebhqBZxMHNg0HiYYf1Lx/HcGg6q1nnOSArPtZYbGy7yc5V.wP/",
  "$6$KB$e0HAHUeBkbmMUYH50qM6XOcuMh5NIh4wWqaF5veFJ8lCCXO2WikTvJXMRUhQAE.L0c583VnKDUYYsz4hdRSPx.",
  "$6$KB$/g6qkCh2GqH3qbb9VpoY.LaOEfiuD3JQ9xt49hYMEGHxCWq26lsspDwYankcFID6OY2/pGKIa2ysBWzvaK87D0",
  "$6$KB$QIT0aY3OjXyMz7/0u/Evwrzcb44AwaQbsRFPZ3UeT8df8LoJzpDI8ULgvKw5ZfZJui3nj0k3OtkGaB/znQwrU1"
};
/**
Required by lack of standard function in C.
*/
void substr(char *dest, char *src, int start, int length){
memcpy(dest, src + start, length);
*(dest + length) = '\0';
}
/**
The above form of password can be cracked by this function. All the trial combinations are shown and when the password is identified, # is put in the beginning of the line. Remember that one of the time-consuming tasks it carries out is to provide intermediate outcomes, so that this should not involve conducting experiments with this type of program. i.e. comment out the printfs.
*/
//frist function for Instance 1
void function_1(char *salt_and_encrypted){
int x, y, z; // Loop counters
char salt[7]; // String used for password hashing. Need space
char plain[7]; // The combination of letters currently being tested
char *enc;
// Pointer to the encrypted password
int count = 0; // The number of combinations explored so far
substr(salt, salt_and_encrypted, 0, 6);
for(x='A'; x<='M'; x++){
//loop iterating from A to M
for(y='A'; y<='Z'; y++){
//loop iterating from A to Z
for(z=0; z<=99; z++){
//loop iterating from 0 to 99
printf("Instance 1");
sprintf(plain, "%c%c%02d", x, y, z);
enc = (char *) crypt(plain, salt);
count++;
if(strcmp(salt_and_encrypted, enc) == 0){
printf("#%-8d%s %s\n", count, plain, enc);
} else {
printf(" %-8d%s %s\n", count, plain, enc);
}
}
}
}
printf("%d solutions explored\n", count);
}
//funcation 2 for second instance
void function_2(char *salt_and_encrypted){
int x, y, z; // Loop counters
char salt[7]; // String used for password hashing. Need space
char plain[7]; // The combination of letters currently being tested
char *enc;
// Pointer to the encrypted password
int count = 0; // The number of combinations explored so far
substr(salt, salt_and_encrypted, 0, 6);
for(x='N'; x<='Z'; x++){ ///loop iterating from N to Z for second insatance
for(y='A'; y<='Z'; y++){
for(z=0; z<=99; z++){
printf("Instance 2");
sprintf(plain, "%c%c%02d", x, y, z);
enc = (char *) crypt(plain, salt);
count++;
if(strcmp(salt_and_encrypted, enc) == 0){
printf("#%-8d%s %s\n", count, plain, enc);
} else {
printf(" %-8d%s %s\n", count, plain, enc);
}
}
}
}
printf("%d solutions explored\n", count);
}
//time difference
int time_difference(struct timespec *start,
struct timespec *finish,
long long int *difference) {
long long int ds = finish->tv_sec - start->tv_sec;
long long int dn = finish->tv_nsec - start->tv_nsec;
if(dn < 0 ) {
ds--;
dn += 1000000000;
}
*difference = ds * 1000000000 + dn;
return !(*difference > 0);
}
int main(int argc, char *argv[]){
//int account = 0;
int size, rank;
struct timespec start, finish;
long long int time_elapsed;
clock_gettime(CLOCK_MONOTONIC, &start); ///starting time
MPI_Init(NULL, NULL);
//Determination of group size and callin rank
 MPI_Comm_size(MPI_COMM_WORLD, &size);
MPI_Comm_rank(MPI_COMM_WORLD, &rank);
if(size != 3) {
if(rank == 0) {
printf("This program needs to run on exactly 3 processes\n");
}
} else {
if(rank ==0){
int x;
int y;
int i;
//Element count sending
MPI_Send(&x, 1, MPI_INT,1, 0, MPI_COMM_WORLD);
MPI_Send(&y, 1, MPI_INT, 2, 0, MPI_COMM_WORLD);
} else {
if(rank == 1){
int i;
int number = rank + 10;
//receving element count
MPI_Recv(&number, 1, MPI_INT, 0, 0, MPI_COMM_WORLD,MPI_STATUS_IGNORE);
for ( i = 0; i<n_passwords;i<i++){
function_1(encrypted_passwords[i]);
}
}
else if(rank == 2){
int i;
int number = rank + 10;
//receving element count
MPI_Recv(&number, 1, MPI_INT, 0, 0, MPI_COMM_WORLD,MPI_STATUS_IGNORE);
for ( i = 0; i<n_passwords;i<i++){
function_2(encrypted_passwords[i]);
}
}
}
}
MPI_Finalize(); //termenating MPI
clock_gettime(CLOCK_MONOTONIC, &finish);
time_difference(&start, &finish, &time_elapsed);
printf("Time elapsed was %lldns or %0.9lfs\n", time_elapsed,
(time_elapsed/1.0e9));
return 0;
}
